def stashCheckout(String repositoryUrl, String branches) {
    checkout([$class: 'GitSCM',
              branches: [[name: "${branches}"]],
              doGenerateSubmoduleConfigurations: false,
              extensions: [[$class: 'CleanCheckout']],
              submoduleCfg: [],
              userRemoteConfigs: [[credentialsId: '0a067f91-f4be-4b9f-8b46-72b90f908e48', url: "${repositoryUrl}"]]])
}

def notifyStash(String state, String commitSha1) {
    echo "AAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    if ('SUCCESS' == state || 'FAILED' == state) {
        currentBuild.result = state
    }
    echo "BBBBBBBBBBBBBBBBBBBBBBBBBBBBB"
    def sha = sh(returnStdout: true, script: "cat ${commitSha1}").trim()
    echo "CCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
    echo "notify for commit - ${sha} | ${state}"
    echo "DDDDDDDDDDDDDDDDDDDDDDDDDDDDD"
    step([$class: 'StashNotifier',
          commitSha1: "${sha}",
          credentialsId: '0a067f91-f4be-4b9f-8b46-72b90f908e48',
          disableInprogressNotification: false,
          ignoreUnverifiedSSLPeer: true,
          includeBuildNumberInKey: false,
          prependParentProjectKey: false,
          projectKey: '',
          stashServerBaseUrl: 'https://lco-eng-stash.colo.seagate.com:8443'])
    echo "EEEEEEEEEEEEEEEEEEEEEEEEEEEEE"      
}

pipeline {
    agent any
    triggers {
        pollSCM('H 0 1 1 0')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr:'100'))
    }

    parameters {
        string(name: 'PERSON', defaultValue: 'Savi', description: 'My name')
        string(name: 'HA_DEVICE', defaultValue: '/dev/sdb', description: 'HA Lamarr device path')
        string(name: 'UBOOT_LINUX_BRANCHES', defaultValue: 'master', description: 'uboot-linux-lamarr branches that should be built')
        string(name: 'KINETICD_BRANCHES', defaultValue: '**', description: 'kineticd-lamarr branches that should be built')
        string(name: 'KINETIC_IPADDR', defaultValue: '172.16.0.51', description: 'IP address of the kinetic device')
    }
    
    environment {
        CC = "Clang"
        DEPENDENCIES_PATH = '/var/lib/jenkins/kv-jenkins-dependencies'
        KV_CI_SCRIPTS = "${DEPENDENCIES_PATH}/continuous-integration/scripts"
        UBOOT_LINUX_PATH = "${DEPENDENCIES_PATH}/uboot-linux-lamarr"
        KV_PYTHON_PATH = "${DEPENDENCIES_PATH}/python"
        KINETIC_DIR = 'kineticd-lamarr'
        UBOOT_LINUX_DIR = 'uboot-linux-lamarr'
        BUILD_OUTPUT_PATH = 'EmbeddedBuildComponents/Individual-Components/Installer/'
        ARM_DIR = 'arm'
        X86_DIR = 'x86'
        KINETIC_COMMIT = '${WORKSPACE}/kinetic_commit.txt'
        UBOOT_COMMIT = '${WORKSPACE}/uboot_commit.txt'
    }
    
    stages {
        stage('Example') {
            environment {
                CC = "Clang"
            }
            steps {
                echo 'Hello World'
                sh 'printenv'
                echo "Hi2 ${params.PERSON}"
                
                dir("${env.KINETIC_DIR}") {
                    echo "11111111111111111111111111111111"
                    stashCheckout('ssh://git@lco-eng-stash.colo.seagate.com:7999/kin/kineticd-lamarr.git', "${params.KINETICD_BRANCHES}")
                    echo "22222222222222222222222222222222"
                    sh "git rev-parse HEAD > ${env.KINETIC_COMMIT}"
                    echo "33333333333333333333333333333333"
                    notifyStash('', "${env.KINETIC_COMMIT}")
                    echo "44444444444444444444444444444444"
                    
                }
                
                dir("${env.UBOOT_LINUX_DIR}") {
                    echo "55555555555555555555555555555555"
                    stashCheckout('/home/savitha/uboot-linux-lamarr', "${params.UBOOT_LINUX_BRANCHES}")
                    echo "66666666666666666666666666666666"
                    sh "git rev-parse HEAD > ${env.UBOOT_COMMIT}" 
                    echo "77777777777777777777777777777777"
                    echo "1: ENV_UBOOT_COMMIT   ${env.UBOOT_COMMIT}"
                    echo "88888888888888888888888888888888"
                    notifyStash('', "${env.UBOOT_COMMIT}")
                    echo "99999999999999999999999999999999"
                    
                }
            }
        }
        stage('Lint') {
            steps {
                echo "Hello World 2"
                dir("${env.KINETIC_DIR}") {
                    echo 'Linting....'
                    sh './lint.sh 2>&1'
                }
            }
        }
        stage('Setup Environment') {
            steps {
                echo "101010101010101010101010101010101010"
            }
        }
    }
    post { 
        always { 
            echo 'I will always say Hello again!'
        }
        success {
            echo "Post::Success"
        }
    }
}